/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gra.w.pszenicy;

import com.sun.imageio.plugins.common.I18N;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author Sulf
 */
public class gui extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form gui
     */
    Field[][] tab;
    boolean simulation = false;
    int number_of_living=0;
    int cell_size = 15; 
    int rows;// = window_height/cell_size-4;
    int cols;// = gui.window_width/cell_size;
    Dimension size;
    public gui() {
        initComponents();
        size = jPanel1.getSize();
        rows = size.height/cell_size-4;
        cols = size.width/cell_size;
        jPanel1.setLayout(new GridLayout(27,51));
        modify_jpanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 469, Short.MAX_VALUE)
        );

        jButton2.setText("Run");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Randomize");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 533, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        simulation = true;
        gameThread();       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       for(int i=0;i<rows;i++)
           for(int j=0;j<cols;j++)
               tab[i][j].is_alive(false);
       simulation=false;
       jPanel1.revalidate();
       jPanel1.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Random generator = new Random();
        for(int i=1;i<rows-1;i++)
            for(int j=1;j<cols-1;j++)
                tab[i][j].is_alive(generator.nextBoolean());
        for(int i=1;i<rows-1;i++)
            for(int j=1;j<cols-1;j++)
                if(tab[i][j].alive)
                    number_of_living++;
    }//GEN-LAST:event_jButton4ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    private void modify_jpanel()
    {
        tab = new Field[rows][cols];
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {   tab[i][j] = new Field("");
                tab[i][j].setBorder(null);
                tab[i][j].setVisible(true);
                //tab[i][j].x=i;
                //tab[i][j].y=j;
                jPanel1.add(tab[i][j]);
            }
        }
        jPanel1.revalidate();
        jPanel1.repaint();
    }
    
    private int neibhourhood(int i, int j)
    {
        int counter = 0;
        
        if(tab[i-1][j-1].alive)
            counter++;
        if(tab[i-1][j].alive)
            counter++;
        if(tab[i-1][j+1].alive)
            counter++;
        if(tab[i][j-1].alive)
            counter++;
        if(tab[i][j+1].alive)
            counter++;
        if(tab[i+1][j-1].alive)
            counter++;
        if(tab[i+1][j].alive)
            counter++;
        if(tab[i+1][j+1].alive)
            counter++;
        return counter;
    }
    
    void periodicBoundaries(){
        for(int j = 1; j < cols-1; j++)
            tab[0][j] = tab[rows-2][j];
        
        for(int j = 1; j < cols-1; j++)
            tab[rows-1][j] = tab[1][j];
        
        for(int i = 1; i < rows-1; i++)
            tab[i][0] = tab[i][cols-2];
        
        for(int i = 1; i < rows-1; i++)
            tab[i][cols-1] = tab[i][1];
        
        tab[0][0] = tab[rows-2][cols-2];
        tab[rows-1][cols-1] = tab[1][1];
        tab[rows-1][0] = tab[1][cols-2];
        tab[0][cols-1] = tab[rows-2][1];     
    }
    

    
    private void game_of_life()
    {
       // int licz = 5;
        while(simulation){
        
            boolean [][]tmp = new boolean[rows][cols];

            for(int i=1;i<rows-1;i++)
            {
                for(int j=1;j<cols-1;j++)
                {
                tmp[i][j]=tab[i][j].alive;
                }
            }
            
            periodicBoundaries();

            for(int i=1;i<rows-1;i++)
            {
                for(int j=1;j<cols-1;j++)
                {

                    if(i>0 && i<rows-1 && j>0 && j<cols-1) //warunek ogólny
                    {   
                        if(tab[i][j].alive)//gdy żyje
                        { 
                            int temp = neibhourhood(i, j);
                            if (temp==3 || temp == 2)
                                tmp[i][j]=true;
                            else
                                tmp[i][j]=false; 
                        }
                        else
                        {   //gdy nie zyje
                            if ( neibhourhood(i, j)==3)
                                tmp[i][j]=true;
                            else
                                tmp[i][j]=false; 
                        }
                    }
                }
            }
            
            for (int i = 1; i < rows-1; i++) 
            {
                for (int j = 1; j < cols-1; j++) {
                    tab[i][j].is_alive(tmp[i][j]);
                }
            }

            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void gameThread(){
        Thread t = new Thread(this);
        t.start();
   }
    
    @Override
    public void run() { 
       game_of_life();
    }
}
